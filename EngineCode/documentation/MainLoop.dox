Pêtla g³ówna silnika
/**
@page MainLoop Pêtla g³ówna silnika

@section Contents Spis Treœci
- @ref Code
- @ref Description


@subsection Code Kod
@code
int Engine::main_loop()
{
	MSG msg;
	LARGE_INTEGER time_temp;

	//Sprawdzamy czêstotliwoœæ timera systemowego, a potem inicjujemy licznik czasu
	QueryPerformanceFrequency( &time_temp );
	timer_frequency = time_temp.QuadPart;
	QueryPerformanceCounter( &time_temp );		//inicjujemy licznik czasu
	time_previous = time_temp.QuadPart;
	elapsed_time = time_previous;

	// Main message loop:
	while (TRUE)
	{
		if ( directX_ready )
			render_frame();

		while (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
		//while (GetMessage(&msg, NULL, 0, 0))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}

		if (msg.message == WM_QUIT)
		{
			break;
		}
	}

	return (int)msg.wParam;
}
@endcode
@subsection Description Opis
Pêtla g³ówna silnika zastêpuje Windowsowsk¹ pêtlê komunikatów, wywo³uj¹c jednoczeœnie pêtlê g³ówn¹ silnika (zobacz temat: Potok przetwarzania obiektów). Musimy obs³ugiwaæ komunikaty windowsa, poniewa¿ w przeciwnym razie móg³by on uznaæ, ¿e nasz program siê zawiesi³, i spróbowaæ zabiæ nasz proces. Dlatego pobieramy wiadomoœci z kolejki komunikatów i przekazujemy do dalszego przetwarzania. Do pobierania komunikatów u¿ywamy nieblokuj¹cej funkcji PeekMessage (nie GetMessage). 

Jako pêtla g³ówna silnika s³u¿y funkcja render_frame. Jest ona wywo³ywana tylko pod warunkiem, ¿e wczeœniejsza inicjalizacja directXa w pe³ni powiod³a siê. Wa¿nym punktem jest inicjacja zmiennej time_previous. Niezainicjowanie tej zmiennej, mog³oby spowodowaæ, ¿e w pierwszej klatce nast¹pi³aby nieprzewidywalna zmiana po³o¿eñ i orientacji wszystkich obiektów na scenie.

Wyjœcie z aplikacji nastêpuje kiedy w kolejce komunikatów windowsa znajdzie siê komunikat WM_QUIT. Z wnêtrza silnika mo¿na to osi¹gn¹æ przez wywo³anie funkcji end_aplication.

Definicja: "Engine_window_functions.cpp"
*/