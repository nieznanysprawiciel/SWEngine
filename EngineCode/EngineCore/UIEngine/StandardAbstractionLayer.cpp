#include "EngineCore/stdafx.h"
#include "EngineCore/UIEngine/StandardAbstractionLayers.h"

#include "EngineCore/UIEngine/InputLibrary/KeyboardState.h"
#include "EngineCore/UIEngine/InputLibrary/MouseState.h"

#include <vector>



namespace STANDARD_LAYERS
{

	std::vector< InputMapping > PROTOTYPE_BUTTONS_mapping =
	{

		{ DEVICE_IDs::KEYBOARD, PROTOTYPE_BUTTONS::FORWARD, KeyboardState::PHYSICAL_KEYS::KEY_W },
		{ DEVICE_IDs::KEYBOARD, PROTOTYPE_BUTTONS::BACKWARD, KeyboardState::PHYSICAL_KEYS::KEY_S },
		{ DEVICE_IDs::KEYBOARD, PROTOTYPE_BUTTONS::LEFT, KeyboardState::PHYSICAL_KEYS::KEY_A },
		{ DEVICE_IDs::KEYBOARD, PROTOTYPE_BUTTONS::RIGHT, KeyboardState::PHYSICAL_KEYS::KEY_D },
		{ DEVICE_IDs::KEYBOARD, PROTOTYPE_BUTTONS::TURN_RIGHT, KeyboardState::PHYSICAL_KEYS::KEY_X },
		{ DEVICE_IDs::KEYBOARD, PROTOTYPE_BUTTONS::TURN_LEFT, KeyboardState::PHYSICAL_KEYS::KEY_Z },
		{ DEVICE_IDs::KEYBOARD, PROTOTYPE_BUTTONS::UP, KeyboardState::PHYSICAL_KEYS::KEY_Q },
		{ DEVICE_IDs::KEYBOARD, PROTOTYPE_BUTTONS::DOWN, KeyboardState::PHYSICAL_KEYS::KEY_E },
		{ DEVICE_IDs::KEYBOARD, PROTOTYPE_BUTTONS::SHOT1, KeyboardState::PHYSICAL_KEYS::KEY_LCONTROL },
		{ DEVICE_IDs::KEYBOARD, PROTOTYPE_BUTTONS::SHOT2, KeyboardState::PHYSICAL_KEYS::KEY_RCONTROL },
		{ DEVICE_IDs::KEYBOARD, PROTOTYPE_BUTTONS::ESCAPE, KeyboardState::PHYSICAL_KEYS::KEY_ESCAPE },
		{ DEVICE_IDs::KEYBOARD, PROTOTYPE_BUTTONS::GENERATE_LIGHTMAPS1, KeyboardState::PHYSICAL_KEYS::KEY_1 },
		{ DEVICE_IDs::KEYBOARD, PROTOTYPE_BUTTONS::GENERATE_LIGHTMAPS2, KeyboardState::PHYSICAL_KEYS::KEY_2 },
		{ DEVICE_IDs::KEYBOARD, PROTOTYPE_BUTTONS::GENERATE_LIGHTMAPS3, KeyboardState::PHYSICAL_KEYS::KEY_3 },
		{ DEVICE_IDs::KEYBOARD, PROTOTYPE_BUTTONS::GENERATE_LIGHTMAPS4, KeyboardState::PHYSICAL_KEYS::KEY_4 },
		{ DEVICE_IDs::KEYBOARD, PROTOTYPE_BUTTONS::GENERATE_LIGHTMAPS5, KeyboardState::PHYSICAL_KEYS::KEY_5 },
		{ DEVICE_IDs::KEYBOARD, PROTOTYPE_BUTTONS::LOAD_LIGHTMAP_SCENE, KeyboardState::PHYSICAL_KEYS::KEY_L },
		{ DEVICE_IDs::MOUSE, PROTOTYPE_BUTTONS::RIGHT_CLICK, MouseState::PHYSICAL_BUTTONS::RIGHT_BUTTON },
		{ DEVICE_IDs::MOUSE, PROTOTYPE_BUTTONS::LEFT_CLICK, MouseState::PHYSICAL_BUTTONS::LEFT_BUTTON },
	};

	std::vector< InputMapping > PROTOTYPE_AXES_mapping =
	{
		{ DEVICE_IDs::MOUSE, PROTOTYPE_AXES::X_AXIS, MouseState::PHYSICAL_AXES::X_AXIS },
		{ DEVICE_IDs::MOUSE, PROTOTYPE_AXES::Y_AXIS, MouseState::PHYSICAL_AXES::Y_AXIS }, 
		{ DEVICE_IDs::MOUSE, PROTOTYPE_AXES::Z_AXIS, MouseState::PHYSICAL_AXES::WHEEL }
	};

}

